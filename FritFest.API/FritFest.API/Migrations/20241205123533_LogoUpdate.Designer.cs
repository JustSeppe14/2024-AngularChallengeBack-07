// <auto-generated />
using System;
using FritFest.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FritFest.API.Migrations
{
    [DbContext(typeof(FestivalContext))]
    [Migration("20241205123533_LogoUpdate")]
    partial class LogoUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FritFest.API.Entities.Article", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleId");

                    b.HasIndex("EditionId");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Artist", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.HasIndex("EditionId");

                    b.ToTable("Artist", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.BoughtTicket", b =>
                {
                    b.Property<Guid>("BoughtTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HolderMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Payed")
                        .HasColumnType("bit");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BoughtTicketId");

                    b.HasIndex("EditionId");

                    b.HasIndex("TicketId");

                    b.ToTable("BoughtTicket", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Day", b =>
                {
                    b.Property<Guid>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DayId");

                    b.ToTable("Day", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.DayList", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketId", "DayId");

                    b.HasIndex("DayId");

                    b.ToTable("DayList", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Edition", b =>
                {
                    b.Property<Guid>("EditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EditionId");

                    b.ToTable("Edition", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.FoodTruck", b =>
                {
                    b.Property<Guid>("FoodTruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodTruckId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LocationId");

                    b.ToTable("FoodTruck", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.MenuItem", b =>
                {
                    b.Property<Guid>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodTruckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.HasKey("MenuItemId");

                    b.HasIndex("FoodTruckId");

                    b.ToTable("MenuItem", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Photo", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("EditionId");

                    b.HasIndex("StageId");

                    b.ToTable("Photo", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Sponsor", b =>
                {
                    b.Property<Guid>("SponsorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("SponsorLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SponsorMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SponsorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SponsoredItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SponsorId");

                    b.HasIndex("EditionId");

                    b.ToTable("Sponsor", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Stage", b =>
                {
                    b.Property<Guid>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StageId");

                    b.HasIndex("LocationId");

                    b.ToTable("Stage", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketId");

                    b.HasIndex("DayId");

                    b.HasIndex("EditionId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.TicketType", b =>
                {
                    b.Property<Guid>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("TicketTypeId");

                    b.ToTable("TicketType", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.TimeSlot", b =>
                {
                    b.Property<Guid>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TimeSlotId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("StageId");

                    b.ToTable("TimeSlot", (string)null);
                });

            modelBuilder.Entity("FritFest.API.Entities.Article", b =>
                {
                    b.HasOne("FritFest.API.Entities.Edition", "Edition")
                        .WithMany("Articles")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("FritFest.API.Entities.Artist", b =>
                {
                    b.HasOne("FritFest.API.Entities.Edition", "Edition")
                        .WithMany("Artists")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("FritFest.API.Entities.BoughtTicket", b =>
                {
                    b.HasOne("FritFest.API.Entities.Edition", null)
                        .WithMany("Tickets")
                        .HasForeignKey("EditionId");

                    b.HasOne("FritFest.API.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("FritFest.API.Entities.DayList", b =>
                {
                    b.HasOne("FritFest.API.Entities.Day", "Day")
                        .WithMany()
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FritFest.API.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("FritFest.API.Entities.FoodTruck", b =>
                {
                    b.HasOne("FritFest.API.Entities.Edition", "Edition")
                        .WithMany("Foodtrucks")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FritFest.API.Entities.Location", "Location")
                        .WithMany("FoodTrucks")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FritFest.API.Entities.MenuItem", b =>
                {
                    b.HasOne("FritFest.API.Entities.FoodTruck", "FoodTruck")
                        .WithMany("MenuItems")
                        .HasForeignKey("FoodTruckId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FoodTruck");
                });

            modelBuilder.Entity("FritFest.API.Entities.Photo", b =>
                {
                    b.HasOne("FritFest.API.Entities.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FritFest.API.Entities.Edition", "Edition")
                        .WithMany("Photos")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FritFest.API.Entities.Stage", "Stage")
                        .WithMany("Photos")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Edition");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("FritFest.API.Entities.Sponsor", b =>
                {
                    b.HasOne("FritFest.API.Entities.Edition", "Edition")
                        .WithMany("Sponsors")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("FritFest.API.Entities.Stage", b =>
                {
                    b.HasOne("FritFest.API.Entities.Location", "Location")
                        .WithMany("Stages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FritFest.API.Entities.Ticket", b =>
                {
                    b.HasOne("FritFest.API.Entities.Day", "Day")
                        .WithMany("Tickets")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FritFest.API.Entities.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FritFest.API.Entities.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Edition");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("FritFest.API.Entities.TimeSlot", b =>
                {
                    b.HasOne("FritFest.API.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FritFest.API.Entities.Stage", "Stage")
                        .WithMany("TimeSlots")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("FritFest.API.Entities.Day", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FritFest.API.Entities.Edition", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Artists");

                    b.Navigation("Foodtrucks");

                    b.Navigation("Photos");

                    b.Navigation("Sponsors");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FritFest.API.Entities.FoodTruck", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("FritFest.API.Entities.Location", b =>
                {
                    b.Navigation("FoodTrucks");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("FritFest.API.Entities.Stage", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("TimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
